<?php

namespace {{ namespace }};

use OPGG\LaravelMcpServer\Services\PromptService\Prompt;

/**
 * {{ className }} - MCP Prompt Implementation
 *
 * Prompts are reusable templates that help LLMs understand how to use your
 * application's tools and resources effectively. They provide structured
 * guidance and can be parameterized for different scenarios.
 *
 * REQUIRED PROPERTIES:
 * --------------------
 * @property string $name
 *     Unique identifier for this prompt. Use kebab-case naming.
 *     Examples: "debug-code", "analyze-logs", "generate-report"
 *
 * @property string $text
 *     The actual prompt template. Use {placeholders} for dynamic values.
 *     These will be replaced with argument values when the prompt is requested.
 *
 * OPTIONAL PROPERTIES:
 * -------------------
 * @property ?string $description
 *     Human-readable description explaining what this prompt does.
 *     This helps users understand when and how to use the prompt.
 *
 * @property array $arguments
 *     Defines the parameters that can be passed to this prompt.
 *     Each argument should have:
 *     - name: string (required) - The placeholder name used in {braces}
 *     - description: string (optional) - Explains what this argument is for
 *     - required: bool (optional, default: false) - Whether this argument must be provided
 *
 * USAGE EXAMPLES:
 * ===============
 * 
 * Basic Usage:
 * When a client requests this prompt:
 * {
 *   "method": "prompts/get",
 *   "params": {
 *     "name": "{{ name }}",
 *     "arguments": {
 *       "example_arg": "World",
 *       "optional_arg": "Laravel"
 *     }
 *   }
 * }
 *
 * Advanced Usage with cURL:
 * curl -X POST http://localhost:8000/mcp \
 *   -H "Content-Type: application/json" \
 *   -d '{
 *     "jsonrpc": "2.0",
 *     "id": 1,
 *     "method": "prompts/get",
 *     "params": {
 *       "name": "{{ name }}",
 *       "arguments": {
 *         "example_arg": "AI Assistant",
 *         "optional_arg": "Advanced Mode"
 *       }
 *     }
 *   }'
 *
 * Testing with Artisan:
 * php artisan mcp:test-tool --list
 * 
 * Using MCP Inspector:
 * npx @modelcontextprotocol/inspector
 * # Then connect to your Laravel server endpoint
 *
 * ADVANCED PROMPT PATTERNS:
 * ========================
 * 
 * Multi-Message Prompts:
 * You can return arrays of messages for complex interactions:
 * return [
 *   ['role' => 'system', 'content' => 'You are a helpful assistant...'],
 *   ['role' => 'user', 'content' => $this->text],
 * ];
 *
 * Conditional Content:
 * Use PHP logic to customize prompts based on arguments:
 * $content = "Base prompt text";
 * if ($arguments['advanced_mode']) {
 *   $content .= " Include technical details and advanced options.";
 * }
 *
 * Resource References:
 * Include references to your resources in prompts:
 * "Analyze the data from file:///logs/{date}.log and provide insights."
 *
 * Tool Integration:
 * Guide LLMs on which tools to use:
 * "Use the search-products tool to find items matching {criteria}."
 *
 * @see https://modelcontextprotocol.io/docs/concepts/prompts
 */
class {{ className }} extends Prompt
{
    /**
     * Unique identifier for this prompt.
     * Used by clients to request this specific prompt.
     *
     * NAMING BEST PRACTICES:
     * - Use descriptive, action-oriented names
     * - Include context or domain when relevant
     * - Examples: 'analyze-sales-data', 'debug-api-error', 'generate-user-report'
     * - Use kebab-case naming convention
     */
    public string $name = '{{ name }}';

    /**
     * Optional description shown in prompt listings.
     * Help users understand what this prompt is designed for.
     */
    public ?string $description = 'A template for [describe the specific use case]';

    /**
     * Define the arguments this prompt accepts.
     * Each argument can be required or optional.
     */
    public array $arguments = [
        [
            'name' => 'example_arg',
            'description' => 'The main parameter for this prompt',
            'required' => true,
        ],
        [
            'name' => 'optional_arg',
            'description' => 'An optional parameter that enhances the prompt',
            'required' => false,
        ],
    ];

    /**
     * The prompt template text.
     * 
     * Best practices:
     * - Be clear and specific about what you want the LLM to do
     * - Use {placeholders} for all dynamic values
     * - Include context about available tools or resources if relevant
     * - Structure complex prompts with clear sections
     */
    public string $text = <<<'PROMPT'
You are assisting with {example_arg}.

{optional_arg}

Please follow these guidelines:
1. [First instruction]
2. [Second instruction]
3. [Third instruction]

Available tools for this task:
- tool-name: Description of what it does
- another-tool: Description of its purpose

Begin by analyzing the requirements and proceed step by step.
PROMPT;
}
